use std::{
    fs::File,
    io::{self, BufRead},
    path::Path,
};

struct Pgn {
    pub moves: Vec<String>,
}

impl Pgn {
    fn read(name: &str) -> std::io::Result<Pgn> {
        let lines = read_lines(name)?;
        let moves = vec![];
        for line in lines {
            let line = line?;
            if !line.starts_with("[") && !line.is_empty() {
                let mut m: Vec<String> = line.split(" ").map(String::from).collect();
                moves.append(m);
            }
        }
        Ok(Pgn { moves })
    }
}

// The output is wrapped in a Result to allow matching on errors
// Returns an Iterator to the Reader of the lines of the file.
fn read_lines<P>(filename: P) -> io::Result<io::Lines<io::BufReader<File>>>
where
    P: AsRef<Path>,
{
    let file = File::open(filename)?;
    Ok(io::BufReader::new(file).lines())
}
